{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/lib/sheets/service.ts"],"sourcesContent":["import { google } from 'googleapis';\r\nimport { BetData } from '../telegram/parser'; // Mudança aqui!\r\nimport { SHEETS_CONFIG } from '../security/config';\r\n\r\ninterface SheetsConfig {\r\n  spreadsheetId: string;\r\n  range: string;\r\n  credentials: {\r\n    client_email: string;\r\n    private_key: string;\r\n  };\r\n}\r\n\r\nclass GoogleSheetsService {\r\n  private sheets: any;\r\n  private auth: any;\r\n  private config: SheetsConfig;\r\n\r\n  constructor(config: SheetsConfig) {\r\n    this.config = config;\r\n    this.initializeAuth();\r\n  }\r\n\r\n  private async initializeAuth() {\r\n    try {\r\n      this.auth = new google.auth.GoogleAuth({\r\n        credentials: this.config.credentials,\r\n        scopes: ['https://www.googleapis.com/auth/spreadsheets'],\r\n      });\r\n\r\n      this.sheets = google.sheets({ version: 'v4', auth: this.auth });\r\n    } catch (error) {\r\n      console.error('Erro ao inicializar autenticação Google Sheets:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async addBetData(betData: BetData): Promise<boolean> {\r\n    try {\r\n      console.log('Dados recebidos para salvar:', betData);\r\n      \r\n      const values = this.formatBetDataForSheets(betData);\r\n      console.log('Valores formatados:', values);\r\n      \r\n      const request = {\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: this.config.range,\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: {\r\n          values: [values],\r\n        },\r\n      };\r\n\r\n      console.log('Enviando para Google Sheets:', request);\r\n      const response = await this.sheets.spreadsheets.values.append(request);\r\n      \r\n      console.log('Resposta do Google Sheets:', response.status, response.statusText);\r\n      \r\n      if (response.status === 200) {\r\n        console.log('✅ Dados adicionados com sucesso ao Google Sheets');\r\n        return true;\r\n      }\r\n      \r\n      console.error('❌ Falha ao adicionar dados - Status:', response.status);\r\n      return false;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao adicionar dados ao Google Sheets:', error);\r\n      if (error instanceof Error && (error as any).response) {\r\n        console.error('Detalhes do erro:', (error as any).response.data);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async addMultipleBetData(betDataArray: BetData[]): Promise<number> {\r\n    if (betDataArray.length === 0) return 0;\r\n    \r\n    try {\r\n      const values = betDataArray.map(bet => this.formatBetDataForSheets(bet));\r\n      \r\n      const request = {\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: this.config.range,\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: {\r\n          values,\r\n        },\r\n      };\r\n\r\n      const response = await this.sheets.spreadsheets.values.append(request);\r\n      \r\n      if (response.status === 200) {\r\n        console.log(`${betDataArray.length} registros adicionados com sucesso`);\r\n        return betDataArray.length;\r\n      }\r\n      \r\n      return 0;\r\n    } catch (error) {\r\n      console.error('Erro ao adicionar múltiplos dados:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  private formatBetDataForSheets(betData: BetData): any[] {\r\n    // Formatação corrigida para a estrutura real da planilha\r\n    return [\r\n      betData.data instanceof Date \r\n        ? betData.data.toLocaleString('pt-BR') \r\n        : new Date(betData.data).toLocaleString('pt-BR'),    // A - Data\r\n      betData.jogo,                                         // B - Jogo\r\n      '',                                                   // C - Placar (vazio inicialmente)\r\n      betData.linha_da_aposta,                              // D - Linha_da_Aposta\r\n      betData.mercado,                                      // E - Mercado\r\n      typeof betData.odd_tipster === 'number' \r\n        ? betData.odd_tipster.toString() \r\n        : betData.odd_tipster,                              // F - Odd_Tipster\r\n      betData.pegou === true ? 'SIM' : \r\n      betData.pegou === false ? 'NÃO' : 'PENDENTE',        // G - Pegou\r\n      betData.odd_real ? betData.odd_real.toString() : '', // H - Odd_Real\r\n      '',                                                   // I - Resultado_Jogo (vazio inicialmente)\r\n      betData.resultado_aposta || 'Pendente',               // J - Resultado_Aposta\r\n    ];\r\n  }\r\n\r\n  async createHeaderRow(): Promise<boolean> {\r\n    try {\r\n      const headers = [\r\n        'Data',                  // A\r\n        'Jogo',                  // B\r\n        'Placar',                // C\r\n        'Linha_da_Aposta',       // D\r\n        'Mercado',               // E\r\n        'Odd_Tipster',           // F\r\n        'Pegou',                 // G\r\n        'Odd_Real',              // H\r\n        'Resultado_Jogo',        // I\r\n        'Resultado_Aposta'       // J\r\n      ];\r\n  \r\n      const request = {\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: 'A1:J1',\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: {\r\n          values: [headers],\r\n        },\r\n      };\r\n  \r\n      const response = await this.sheets.spreadsheets.values.update(request);\r\n      console.log('Cabeçalho criado:', response.status === 200 ? 'Sucesso' : 'Falha');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      console.error('Erro ao criar cabeçalho:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getSheetData(range?: string): Promise<any[]> {\r\n    try {\r\n      const response = await this.sheets.spreadsheets.values.get({\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: range || this.config.range,\r\n      });\r\n\r\n      return response.data.values || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar dados da planilha:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Método para testar a conexão\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await this.sheets.spreadsheets.get({\r\n        spreadsheetId: this.config.spreadsheetId\r\n      });\r\n      \r\n      console.log('✅ Conexão com Google Sheets OK:', response.data.properties.title);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Erro na conexão com Google Sheets:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default GoogleSheetsService;\r\nexport type { SheetsConfig };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/lib/security/config.ts"],"sourcesContent":["// Configurações de segurança baseadas no OWASP Top 10\r\nexport const SECURITY_CONFIG = {\r\n  // Rate limiting\r\n  RATE_LIMIT: {\r\n    windowMs: 15 * 60 * 1000, // 15 minutos\r\n    max: 100, // máximo 100 requests por IP\r\n  },\r\n  \r\n  // JWT Configuration\r\n  JWT: {\r\n    expiresIn: '24h',\r\n    algorithm: 'HS256' as const,\r\n  },\r\n  \r\n  // Password requirements\r\n  PASSWORD: {\r\n    minLength: 8,\r\n    requireUppercase: true,\r\n    requireLowercase: true,\r\n    requireNumbers: true,\r\n    requireSpecialChars: true,\r\n  },\r\n  \r\n  // CORS settings\r\n  CORS: {\r\n    origin: process.env.NODE_ENV === 'production' \r\n      ? ['https://yourdomain.com'] \r\n      : ['http://localhost:3000'],\r\n    credentials: true,\r\n  },\r\n  \r\n  // Security headers\r\n  HEADERS: {\r\n    'X-Frame-Options': 'DENY',\r\n    'X-Content-Type-Options': 'nosniff',\r\n    'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n    'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\r\n  },\r\n};\r\n\r\nexport const TELEGRAM_CONFIG = {\r\n  MAX_MESSAGE_LENGTH: 4096,\r\n  ALLOWED_CHAT_TYPES: ['group', 'supergroup'],\r\n  RATE_LIMIT_PER_CHAT: 30, // mensagens por minuto\r\n};\r\n\r\nexport const SHEETS_CONFIG = {\r\n  MAX_ROWS_PER_BATCH: 1000,\r\n  RETRY_ATTEMPTS: 3,\r\n  TIMEOUT_MS: 30000,\r\n};"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;AAC/C,MAAM,kBAAkB;IAC7B,gBAAgB;IAChB,YAAY;QACV,UAAU,KAAK,KAAK;QACpB,KAAK;IACP;IAEA,oBAAoB;IACpB,KAAK;QACH,WAAW;QACX,WAAW;IACb;IAEA,wBAAwB;IACxB,UAAU;QACR,WAAW;QACX,kBAAkB;QAClB,kBAAkB;QAClB,gBAAgB;QAChB,qBAAqB;IACvB;IAEA,gBAAgB;IAChB,MAAM;QACJ,QAAQ,sCACJ,0BACA;YAAC;SAAwB;QAC7B,aAAa;IACf;IAEA,mBAAmB;IACnB,SAAS;QACP,mBAAmB;QACnB,0BAA0B;QAC1B,mBAAmB;QACnB,sBAAsB;IACxB;AACF;AAEO,MAAM,kBAAkB;IAC7B,oBAAoB;IACpB,oBAAoB;QAAC;QAAS;KAAa;IAC3C,qBAAqB;AACvB;AAEO,MAAM,gBAAgB;IAC3B,oBAAoB;IACpB,gBAAgB;IAChB,YAAY;AACd","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/lib/auth/service.ts"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\nimport { SECURITY_CONFIG } from '../security/config';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  role: 'admin' | 'user';\r\n  telegramUserId?: number;\r\n  createdAt: Date;\r\n  lastLogin?: Date;\r\n}\r\n\r\ninterface LoginCredentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  telegramUserId?: number;\r\n}\r\n\r\nclass AuthService {\r\n  private users: User[] = []; // Em produção, usar banco de dados\r\n  private jwtSecret: string;\r\n\r\n  constructor() {\r\n    this.jwtSecret = process.env.JWT_SECRET || 'your-super-secret-key';\r\n    this.initializeMockUsers();\r\n  }\r\n\r\n  private initializeMockUsers() {\r\n    // Usuário admin padrão para desenvolvimento\r\n    const adminUser: User = {\r\n      id: '1',\r\n      email: 'admin@autosheets.com',\r\n      username: 'admin',\r\n      password: bcrypt.hashSync('Admin123!', 10),\r\n      role: 'admin',\r\n      createdAt: new Date(),\r\n    };\r\n    \r\n    this.users.push(adminUser);\r\n  }\r\n\r\n  async register(data: RegisterData): Promise<{ success: boolean; message: string; user?: Partial<User> }> {\r\n    try {\r\n      // Validar se email já existe\r\n      if (this.users.find(u => u.email === data.email)) {\r\n        return { success: false, message: 'Email já cadastrado' };\r\n      }\r\n\r\n      // Validar se username já existe\r\n      if (this.users.find(u => u.username === data.username)) {\r\n        return { success: false, message: 'Username já cadastrado' };\r\n      }\r\n\r\n      // Validar força da senha\r\n      if (!this.isPasswordStrong(data.password)) {\r\n        return { \r\n          success: false, \r\n          message: 'Senha deve ter pelo menos 8 caracteres, incluindo maiúscula, minúscula, número e caractere especial' \r\n        };\r\n      }\r\n\r\n      // Criar novo usuário\r\n      const hashedPassword = await bcrypt.hash(data.password, 10);\r\n      const newUser: User = {\r\n        id: (this.users.length + 1).toString(),\r\n        email: data.email,\r\n        username: data.username,\r\n        password: hashedPassword,\r\n        role: 'user',\r\n        telegramUserId: data.telegramUserId,\r\n        createdAt: new Date(),\r\n      };\r\n\r\n      this.users.push(newUser);\r\n\r\n      const { password, ...userWithoutPassword } = newUser;\r\n      return { \r\n        success: true, \r\n        message: 'Usuário criado com sucesso', \r\n        user: userWithoutPassword \r\n      };\r\n    } catch (error) {\r\n      console.error('Erro no registro:', error);\r\n      return { success: false, message: 'Erro interno do servidor' };\r\n    }\r\n  }\r\n\r\n  async login(credentials: LoginCredentials): Promise<{ success: boolean; message: string; token?: string; user?: Partial<User> }> {\r\n    try {\r\n      const user = this.users.find(u => u.email === credentials.email);\r\n      \r\n      if (!user) {\r\n        return { success: false, message: 'Credenciais inválidas' };\r\n      }\r\n\r\n      const isPasswordValid = await bcrypt.compare(credentials.password, user.password);\r\n      \r\n      if (!isPasswordValid) {\r\n        return { success: false, message: 'Credenciais inválidas' };\r\n      }\r\n\r\n      // Atualizar último login\r\n      user.lastLogin = new Date();\r\n\r\n      // Gerar JWT token\r\n      const token = jwt.sign(\r\n        { \r\n          userId: user.id, \r\n          email: user.email, \r\n          role: user.role \r\n        },\r\n        this.jwtSecret,\r\n        { expiresIn: '24h' }\r\n      );\r\n\r\n      const { password, ...userWithoutPassword } = user;\r\n      return { \r\n        success: true, \r\n        message: 'Login realizado com sucesso', \r\n        token,\r\n        user: userWithoutPassword \r\n      };\r\n    } catch (error) {\r\n      console.error('Erro no login:', error);\r\n      return { success: false, message: 'Erro interno do servidor' };\r\n    }\r\n  }\r\n\r\n  async verifyToken(token: string): Promise<{ valid: boolean; user?: Partial<User> }> {\r\n    try {\r\n      const decoded = jwt.verify(token, this.jwtSecret) as any;\r\n      const user = this.users.find(u => u.id === decoded.userId);\r\n      \r\n      if (!user) {\r\n        return { valid: false };\r\n      }\r\n\r\n      const { password, ...userWithoutPassword } = user;\r\n      return { valid: true, user: userWithoutPassword };\r\n    } catch (error) {\r\n      return { valid: false };\r\n    }\r\n  }\r\n\r\n  private isPasswordStrong(password: string): boolean {\r\n    const config = SECURITY_CONFIG.PASSWORD;\r\n    \r\n    if (password.length < config.minLength) return false;\r\n    if (config.requireUppercase && !/[A-Z]/.test(password)) return false;\r\n    if (config.requireLowercase && !/[a-z]/.test(password)) return false;\r\n    if (config.requireNumbers && !/\\d/.test(password)) return false;\r\n    if (config.requireSpecialChars && !/[!@#$%^&*(),.?\":{}|<>]/.test(password)) return false;\r\n    \r\n    return true;\r\n  }\r\n\r\n  getUserByTelegramId(telegramUserId: number): User | undefined {\r\n    return this.users.find(u => u.telegramUserId === telegramUserId);\r\n  }\r\n\r\n  getAllUsers(): Partial<User>[] {\r\n    return this.users.map(({ password, ...user }) => user);\r\n  }\r\n}\r\n\r\nexport default AuthService;\r\nexport type { User, LoginCredentials, RegisterData };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 565, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/app/api/sheets/data/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport GoogleSheetsService from '@/lib/sheets/service';\r\nimport AuthService from '@/lib/auth/service';\r\n\r\nconst authService = new AuthService();\r\n\r\nconst sheetsConfig = {\r\n  spreadsheetId: process.env.GOOGLE_SHEETS_ID!,\r\n  range: 'Apostas!A:L',\r\n  credentials: {\r\n    client_email: process.env.GOOGLE_CLIENT_EMAIL!,\r\n    private_key: (process.env.GOOGLE_PRIVATE_KEY || '').replace(/\\\\n/g, '\\n'),\r\n  },\r\n};\r\n\r\nconst sheetsService = new GoogleSheetsService(sheetsConfig);\r\n\r\n// Middleware de autenticação\r\nasync function authenticate(request: NextRequest) {\r\n  const authHeader = request.headers.get('authorization');\r\n  \r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    return null;\r\n  }\r\n  \r\n  const token = authHeader.substring(7);\r\n  const result = await authService.verifyToken(token);\r\n  \r\n  return result.valid ? result.user : null;\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const user = await authenticate(request);\r\n    \r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Token inválido ou expirado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    const data = await sheetsService.getSheetData();\r\n    \r\n    return NextResponse.json({\r\n      success: true,\r\n      data,\r\n    });\r\n  } catch (error) {\r\n    console.error('Erro ao buscar dados:', error);\r\n    return NextResponse.json(\r\n      { success: false, message: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const user = await authenticate(request);\r\n    \r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Token inválido ou expirado' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n    \r\n    const body = await request.json();\r\n    const { betData } = body;\r\n    \r\n    if (!betData) {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Dados da aposta são obrigatórios' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n    \r\n    const success = await sheetsService.addBetData(betData);\r\n    \r\n    if (success) {\r\n      return NextResponse.json({\r\n        success: true,\r\n        message: 'Dados adicionados com sucesso',\r\n      });\r\n    } else {\r\n      return NextResponse.json(\r\n        { success: false, message: 'Erro ao adicionar dados' },\r\n        { status: 500 }\r\n      );\r\n    }\r\n  } catch (error) {\r\n    console.error('Erro ao adicionar dados:', error);\r\n    return NextResponse.json(\r\n      { success: false, message: 'Erro interno do servidor' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEA,MAAM,cAAc,IAAI,+HAAA,CAAA,UAAW;AAEnC,MAAM,eAAe;IACnB,eAAe,QAAQ,GAAG,CAAC,gBAAgB;IAC3C,OAAO;IACP,aAAa;QACX,cAAc,QAAQ,GAAG,CAAC,mBAAmB;QAC7C,aAAa,CAAC,QAAQ,GAAG,CAAC,kBAAkB,IAAI,EAAE,EAAE,OAAO,CAAC,QAAQ;IACtE;AACF;AAEA,MAAM,gBAAgB,IAAI,iIAAA,CAAA,UAAmB,CAAC;AAE9C,6BAA6B;AAC7B,eAAe,aAAa,OAAoB;IAC9C,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;QACpD,OAAO;IACT;IAEA,MAAM,QAAQ,WAAW,SAAS,CAAC;IACnC,MAAM,SAAS,MAAM,YAAY,WAAW,CAAC;IAE7C,OAAO,OAAO,KAAK,GAAG,OAAO,IAAI,GAAG;AACtC;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,OAAO,MAAM,aAAa;QAEhC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA6B,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,cAAc,YAAY;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAA2B,GACtD;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,aAAa;QAEhC,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA6B,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,OAAO,EAAE,GAAG;QAEpB,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAAmC,GAC9D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,UAAU,MAAM,cAAc,UAAU,CAAC;QAE/C,IAAI,SAAS;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBACvB,SAAS;gBACT,SAAS;YACX;QACF,OAAO;YACL,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,SAAS;YAA0B,GACrD;gBAAE,QAAQ;YAAI;QAElB;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,SAAS;QAA2B,GACtD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}