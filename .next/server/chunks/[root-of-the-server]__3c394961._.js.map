{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/lib/sheets/service.ts"],"sourcesContent":["import { google } from 'googleapis';\r\nimport { BetData } from '../telegram/parser'; // Mudança aqui!\r\nimport { SHEETS_CONFIG } from '../security/config';\r\n\r\ninterface SheetsConfig {\r\n  spreadsheetId: string;\r\n  range: string;\r\n  credentials: {\r\n    client_email: string;\r\n    private_key: string;\r\n  };\r\n}\r\n\r\nclass GoogleSheetsService {\r\n  private sheets: any;\r\n  private auth: any;\r\n  private config: SheetsConfig;\r\n\r\n  constructor(config: SheetsConfig) {\r\n    this.config = config;\r\n    this.initializeAuth();\r\n  }\r\n\r\n  private async initializeAuth() {\r\n    try {\r\n      this.auth = new google.auth.GoogleAuth({\r\n        credentials: this.config.credentials,\r\n        scopes: ['https://www.googleapis.com/auth/spreadsheets'],\r\n      });\r\n\r\n      this.sheets = google.sheets({ version: 'v4', auth: this.auth });\r\n    } catch (error) {\r\n      console.error('Erro ao inicializar autenticação Google Sheets:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async addBetData(betData: BetData): Promise<boolean> {\r\n    try {\r\n      console.log('Dados recebidos para salvar:', betData);\r\n      \r\n      const values = this.formatBetDataForSheets(betData);\r\n      console.log('Valores formatados:', values);\r\n      \r\n      const request = {\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: this.config.range,\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: {\r\n          values: [values],\r\n        },\r\n      };\r\n\r\n      console.log('Enviando para Google Sheets:', request);\r\n      const response = await this.sheets.spreadsheets.values.append(request);\r\n      \r\n      console.log('Resposta do Google Sheets:', response.status, response.statusText);\r\n      \r\n      if (response.status === 200) {\r\n        console.log('✅ Dados adicionados com sucesso ao Google Sheets');\r\n        return true;\r\n      }\r\n      \r\n      console.error('❌ Falha ao adicionar dados - Status:', response.status);\r\n      return false;\r\n    } catch (error) {\r\n      console.error('❌ Erro ao adicionar dados ao Google Sheets:', error);\r\n      if (error instanceof Error && (error as any).response) {\r\n        console.error('Detalhes do erro:', (error as any).response.data);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async addMultipleBetData(betDataArray: BetData[]): Promise<number> {\r\n    if (betDataArray.length === 0) return 0;\r\n    \r\n    try {\r\n      const values = betDataArray.map(bet => this.formatBetDataForSheets(bet));\r\n      \r\n      const request = {\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: this.config.range,\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: {\r\n          values,\r\n        },\r\n      };\r\n\r\n      const response = await this.sheets.spreadsheets.values.append(request);\r\n      \r\n      if (response.status === 200) {\r\n        console.log(`${betDataArray.length} registros adicionados com sucesso`);\r\n        return betDataArray.length;\r\n      }\r\n      \r\n      return 0;\r\n    } catch (error) {\r\n      console.error('Erro ao adicionar múltiplos dados:', error);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  private formatBetDataForSheets(betData: BetData): any[] {\r\n    // Formatação corrigida para a estrutura real da planilha\r\n    return [\r\n      betData.data instanceof Date \r\n        ? betData.data.toLocaleString('pt-BR') \r\n        : new Date(betData.data).toLocaleString('pt-BR'),    // A - Data\r\n      betData.jogo,                                         // B - Jogo\r\n      '',                                                   // C - Placar (vazio inicialmente)\r\n      betData.linha_da_aposta,                              // D - Linha_da_Aposta\r\n      betData.mercado,                                      // E - Mercado\r\n      typeof betData.odd_tipster === 'number' \r\n        ? betData.odd_tipster.toString() \r\n        : betData.odd_tipster,                              // F - Odd_Tipster\r\n      betData.pegou === true ? 'SIM' : \r\n      betData.pegou === false ? 'NÃO' : 'PENDENTE',        // G - Pegou\r\n      betData.odd_real ? betData.odd_real.toString() : '', // H - Odd_Real\r\n      '',                                                   // I - Resultado_Jogo (vazio inicialmente)\r\n      betData.resultado_aposta || 'Pendente',               // J - Resultado_Aposta\r\n    ];\r\n  }\r\n\r\n  async createHeaderRow(): Promise<boolean> {\r\n    try {\r\n      const headers = [\r\n        'Data',                  // A\r\n        'Jogo',                  // B\r\n        'Placar',                // C\r\n        'Linha_da_Aposta',       // D\r\n        'Mercado',               // E\r\n        'Odd_Tipster',           // F\r\n        'Pegou',                 // G\r\n        'Odd_Real',              // H\r\n        'Resultado_Jogo',        // I\r\n        'Resultado_Aposta'       // J\r\n      ];\r\n  \r\n      const request = {\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: 'A1:J1',\r\n        valueInputOption: 'USER_ENTERED',\r\n        resource: {\r\n          values: [headers],\r\n        },\r\n      };\r\n  \r\n      const response = await this.sheets.spreadsheets.values.update(request);\r\n      console.log('Cabeçalho criado:', response.status === 200 ? 'Sucesso' : 'Falha');\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      console.error('Erro ao criar cabeçalho:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  async getSheetData(range?: string): Promise<any[]> {\r\n    try {\r\n      const response = await this.sheets.spreadsheets.values.get({\r\n        spreadsheetId: this.config.spreadsheetId,\r\n        range: range || this.config.range,\r\n      });\r\n\r\n      return response.data.values || [];\r\n    } catch (error) {\r\n      console.error('Erro ao buscar dados da planilha:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  // Método para testar a conexão\r\n  async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await this.sheets.spreadsheets.get({\r\n        spreadsheetId: this.config.spreadsheetId\r\n      });\r\n      \r\n      console.log('✅ Conexão com Google Sheets OK:', response.data.properties.title);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('❌ Erro na conexão com Google Sheets:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport default GoogleSheetsService;\r\nexport type { SheetsConfig };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/lib/ai/gemini-parser.ts"],"sourcesContent":["import { BetData } from '../telegram/parser';\r\n\r\ninterface GeminiResponse {\r\n  candidates: {\r\n    content: {\r\n      parts: {\r\n        text: string;\r\n      }[];\r\n    };\r\n  }[];\r\n}\r\n\r\nexport class GeminiParser {\r\n  private static readonly API_KEY = process.env.GEMINI_API_KEY;\r\n  // Atualizar para o modelo correto\r\n  private static readonly API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';\r\n\r\n  static async parseBetMessage(message: string, chatId: number, userId: number, username: string): Promise<BetData | null> {\r\n    if (!this.API_KEY) {\r\n      console.error('GEMINI_API_KEY não configurada');\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const prompt = `\r\nAnalise esta mensagem de aposta do Telegram e extraia as informações em formato JSON válido.\r\n\r\nMensagem: \"${message}\"\r\n\r\nVocê deve extrair:\r\n- jogo: Os times que estão jogando (formato: \"Time A vs Time B\")\r\n- mercado: Tipo de aposta (\"Goal Line\", \"Asian Handicap\", \"Resultado Final\", \"Over/Under\", etc.)\r\n- linha_da_aposta: A linha específica da aposta (ex: \"GL +0.5\", \"AH -1.0\", \"Over 2.5\", etc.)\r\n- odd_tipster: A odd fornecida pelo tipster (apenas o número, ex: \"1.85\")\r\n\r\nExemplos de formato para linha_da_aposta:\r\n- Goal Line: \"GL +0.5\", \"GL -1.0\", \"GL 0.0\"\r\n- Asian Handicap: \"AH +1.5\", \"AH -0.5\", \"AH 0.0\"\r\n- Over/Under: \"Over 2.5\", \"Under 1.5\"\r\n- Resultado: \"1\", \"X\", \"2\"\r\n\r\nRetorne APENAS um JSON válido no formato:\r\n{\r\n  \"jogo\": \"Time A vs Time B\",\r\n  \"mercado\": \"Goal Line\",\r\n  \"linha_da_aposta\": \"GL +0.5\",\r\n  \"odd_tipster\": \"1.85\"\r\n}\r\n\r\nSe não conseguir extrair alguma informação, use null para esse campo.`;\r\n\r\n      const response = await fetch(`${this.API_URL}?key=${this.API_KEY}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          contents: [{\r\n            parts: [{\r\n              text: prompt\r\n            }]\r\n          }],\r\n          generationConfig: {\r\n            temperature: 0.1,\r\n            maxOutputTokens: 200,\r\n          }\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.error('Erro na API do Gemini:', response.status, response.statusText);\r\n        return null;\r\n      }\r\n\r\n      const result: GeminiResponse = await response.json();\r\n      \r\n      if (!result.candidates || result.candidates.length === 0) {\r\n        console.error('Nenhuma resposta do Gemini');\r\n        return null;\r\n      }\r\n\r\n      const text = result.candidates[0].content.parts[0].text;\r\n      console.log('Resposta do Gemini:', text);\r\n\r\n      // Extrair JSON da resposta\r\n      const jsonMatch = text.match(/\\{[^}]+\\}/);\r\n      if (!jsonMatch) {\r\n        console.error('JSON não encontrado na resposta do Gemini');\r\n        return null;\r\n      }\r\n\r\n      const parsedData = JSON.parse(jsonMatch[0]);\r\n      \r\n      // Criar objeto BetData\r\n      const betData: BetData = {\r\n        id: `bet_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        chatId,\r\n        userId,\r\n        username,\r\n        message,\r\n        data: new Date(),                                    // Usar Date em vez de string\r\n        jogo: parsedData.jogo || 'Não identificado',\r\n        mercado: parsedData.mercado || 'Pendente',\r\n        linha_da_aposta: parsedData.linha_da_aposta || 'Não identificado',\r\n        odd_tipster: parseFloat(parsedData.odd_tipster) || 0, // Converter para number\r\n        pegou: null,\r\n        odd_real: null,\r\n        resultado_aposta: 'Pendente'\r\n      };\r\n\r\n      return betData;\r\n\r\n    } catch (error) {\r\n      console.error('Erro ao analisar mensagem com Gemini:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static createConfirmationMessage(betData: BetData): string {\r\n    return `🎯 *Aposta detectada!*\\n\\n` +\r\n           `🏆 *Jogo:* ${betData.jogo}\\n` +\r\n           `📊 *Mercado:* ${betData.mercado}\\n` +\r\n           `🎲 *Linha:* ${betData.linha_da_aposta}\\n` +\r\n           `💰 *Odd Tipster:* ${betData.odd_tipster}\\n\\n` +\r\n           `❓ Você pegou essa aposta? (Responda: sim/não)`;\r\n  }\r\n}"],"names":[],"mappings":";;;AAYO,MAAM;IACX,OAAwB,UAAU,QAAQ,GAAG,CAAC,cAAc,CAAC;IAC7D,kCAAkC;IAClC,OAAwB,UAAU,2FAA2F;IAE7H,aAAa,gBAAgB,OAAe,EAAE,MAAc,EAAE,MAAc,EAAE,QAAgB,EAA2B;QACvH,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,QAAQ,KAAK,CAAC;YACd,OAAO;QACT;QAEA,IAAI;YACF,MAAM,SAAS,CAAC;;;WAGX,EAAE,QAAQ;;;;;;;;;;;;;;;;;;;;;;qEAsBgD,CAAC;YAEhE,MAAM,WAAW,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,EAAE;gBAClE,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;oBACnB,UAAU;wBAAC;4BACT,OAAO;gCAAC;oCACN,MAAM;gCACR;6BAAE;wBACJ;qBAAE;oBACF,kBAAkB;wBAChB,aAAa;wBACb,iBAAiB;oBACnB;gBACF;YACF;YAEA,IAAI,CAAC,SAAS,EAAE,EAAE;gBAChB,QAAQ,KAAK,CAAC,0BAA0B,SAAS,MAAM,EAAE,SAAS,UAAU;gBAC5E,OAAO;YACT;YAEA,MAAM,SAAyB,MAAM,SAAS,IAAI;YAElD,IAAI,CAAC,OAAO,UAAU,IAAI,OAAO,UAAU,CAAC,MAAM,KAAK,GAAG;gBACxD,QAAQ,KAAK,CAAC;gBACd,OAAO;YACT;YAEA,MAAM,OAAO,OAAO,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI;YACvD,QAAQ,GAAG,CAAC,uBAAuB;YAEnC,2BAA2B;YAC3B,MAAM,YAAY,KAAK,KAAK,CAAC;YAC7B,IAAI,CAAC,WAAW;gBACd,QAAQ,KAAK,CAAC;gBACd,OAAO;YACT;YAEA,MAAM,aAAa,KAAK,KAAK,CAAC,SAAS,CAAC,EAAE;YAE1C,uBAAuB;YACvB,MAAM,UAAmB;gBACvB,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,MAAM,CAAC,GAAG,IAAI;gBAClE;gBACA;gBACA;gBACA;gBACA,MAAM,IAAI;gBACV,MAAM,WAAW,IAAI,IAAI;gBACzB,SAAS,WAAW,OAAO,IAAI;gBAC/B,iBAAiB,WAAW,eAAe,IAAI;gBAC/C,aAAa,WAAW,WAAW,WAAW,KAAK;gBACnD,OAAO;gBACP,UAAU;gBACV,kBAAkB;YACpB;YAEA,OAAO;QAET,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yCAAyC;YACvD,OAAO;QACT;IACF;IAEA,OAAO,0BAA0B,OAAgB,EAAU;QACzD,OAAO,CAAC,0BAA0B,CAAC,GAC5B,CAAC,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,CAAC,GAC9B,CAAC,cAAc,EAAE,QAAQ,OAAO,CAAC,EAAE,CAAC,GACpC,CAAC,YAAY,EAAE,QAAQ,eAAe,CAAC,EAAE,CAAC,GAC1C,CAAC,kBAAkB,EAAE,QAAQ,WAAW,CAAC,IAAI,CAAC,GAC9C,CAAC,6CAA6C,CAAC;IACxD;AACF","debugId":null}},
    {"offset": {"line": 457, "column": 0}, "map": {"version":3,"sources":["file:///D:/Documentos/Trae/autosheets/src/app/api/telegram/webhook/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport GoogleSheetsService from '@/lib/sheets/service';\r\nimport { GeminiParser } from '@/lib/ai/gemini-parser';\r\nimport { BetData } from '@/lib/telegram/parser';\r\n\r\nconst sheetsConfig = {\r\n  spreadsheetId: process.env.GOOGLE_SHEETS_ID!,\r\n  range: 'Apostas!A:J',  // Mudança de A:L para A:J\r\n  credentials: {\r\n    client_email: process.env.GOOGLE_CLIENT_EMAIL!,\r\n    private_key: (process.env.GOOGLE_PRIVATE_KEY || '').replace(/\\\\n/g, '\\n'),\r\n  },\r\n};\r\n\r\nconst sheetsService = new GoogleSheetsService(sheetsConfig);\r\n\r\n// Cache temporário para aguardar respostas dos usuários\r\nconst pendingConfirmations = new Map<string, any>();\r\n\r\n// NOVO: Método GET para teste\r\nexport async function GET() {\r\n  return NextResponse.json({\r\n    status: 'Webhook ativo! 🤖',\r\n    timestamp: new Date().toISOString(),\r\n    message: 'Este endpoint está funcionando corretamente para receber webhooks do Telegram.'\r\n  });\r\n}\r\n\r\nexport async function POST(request: NextRequest) {\r\n  try {\r\n    const update = await request.json();\r\n    console.log('Update recebido:', JSON.stringify(update, null, 2));\r\n    \r\n    if (update.message && update.message.text) {\r\n      const chatId = update.message.chat.id;\r\n      const userId = update.message.from.id;\r\n      const username = update.message.from.username;\r\n      const messageText = update.message.text;\r\n      const messageLower = messageText.toLowerCase().trim();\r\n      \r\n      console.log(`Mensagem de ${username} (${userId}): \"${messageText}\"`);\r\n      \r\n      const pendingKey = `${chatId}_${userId}`;\r\n      const oddKey = `${pendingKey}_odd`;\r\n      \r\n      // 1. Verificar se está aguardando odd real\r\n      if (pendingConfirmations.has(oddKey)) {\r\n        console.log('Processando odd real...');\r\n        await handleOddResponse(update, oddKey);\r\n        return NextResponse.json({ ok: true });\r\n      }\r\n      \r\n      // 2. Verificar se é resposta SIM/NÃO para confirmação de aposta\r\n      if (pendingConfirmations.has(pendingKey) && \r\n          (messageLower === 'sim' || messageLower === 'não' || messageLower === 'nao')) {\r\n        console.log('Processando confirmação de aposta...');\r\n        await handleBetConfirmation(update, pendingKey);\r\n        return NextResponse.json({ ok: true });\r\n      }\r\n      \r\n      // 3. Processar nova mensagem de aposta com IA (MUDANÇA AQUI!)\r\n      console.log('🤖 Analisando mensagem com Gemini AI...');\r\n      const betData = await GeminiParser.parseBetMessage(\r\n        messageText, \r\n        chatId, \r\n        userId, \r\n        username\r\n      );\r\n      \r\n      if (betData) {\r\n        console.log('✅ Nova aposta detectada pela IA:', betData);\r\n        \r\n        // Salvar temporariamente e solicitar confirmação\r\n        pendingConfirmations.set(pendingKey, betData);\r\n        \r\n        // Enviar mensagem de confirmação\r\n        await sendTelegramMessage(\r\n          chatId, \r\n          GeminiParser.createConfirmationMessage(betData)\r\n        );\r\n        \r\n        console.log('📤 Mensagem de confirmação enviada');\r\n      } else {\r\n        console.log('❌ Mensagem não reconhecida como aposta válida pela IA');\r\n      }\r\n    }\r\n    \r\n    return NextResponse.json({ ok: true });\r\n  } catch (error) {\r\n    console.error('Erro no webhook do Telegram:', error);\r\n    return NextResponse.json({ ok: false }, { status: 500 });\r\n  }\r\n}\r\n\r\nasync function handleBetConfirmation(update: any, pendingKey: string) {\r\n  const chatId = update.message.chat.id;\r\n  const userId = update.message.from.id;\r\n  const messageLower = update.message.text.toLowerCase().trim();\r\n  \r\n  const betData = pendingConfirmations.get(pendingKey);\r\n  if (!betData) {\r\n    console.log('Dados da aposta não encontrados no cache');\r\n    return;\r\n  }\r\n  \r\n  console.log(`Confirmação recebida: ${messageLower}`);\r\n  \r\n  if (messageLower === 'sim') {\r\n    betData.pegou = true;\r\n    \r\n    // Mover para aguardar odd real\r\n    const oddKey = `${pendingKey}_odd`;\r\n    pendingConfirmations.set(oddKey, betData);\r\n    pendingConfirmations.delete(pendingKey);\r\n    \r\n    // Perguntar a odd real\r\n    await sendTelegramMessage(\r\n      chatId,\r\n      `✅ **Confirmado!**\\n\\n💰 **Qual foi a odd real que você conseguiu?**\\n\\nDigite apenas o número (ex: 1.85)`\r\n    );\r\n    \r\n    console.log('Pergunta sobre odd real enviada');\r\n  } else {\r\n    betData.pegou = false;\r\n    betData.odd_real = null;\r\n    \r\n    // Salvar no Google Sheets\r\n    const success = await sheetsService.addBetData(betData);\r\n    \r\n    await sendTelegramMessage(\r\n      chatId,\r\n      `❌ **Aposta não realizada**\\n\\nDados salvos no sistema.`\r\n    );\r\n    \r\n    pendingConfirmations.delete(pendingKey);\r\n    console.log(`Aposta não realizada salva. Sucesso: ${success}`);\r\n  }\r\n}\r\n\r\nasync function handleOddResponse(update: any, oddKey: string) {\r\n  const chatId = update.message.chat.id;\r\n  const messageText = update.message.text;\r\n  \r\n  const betData = pendingConfirmations.get(oddKey);\r\n  if (!betData) {\r\n    console.log('❌ Dados da aposta não encontrados para odd real');\r\n    return;\r\n  }\r\n  \r\n  const oddReal = parseFloat(messageText.replace(',', '.'));\r\n  console.log(`📊 Odd real recebida: ${messageText} -> ${oddReal}`);\r\n  \r\n  if (!isNaN(oddReal) && oddReal > 0) {\r\n    betData.odd_real = oddReal;\r\n    \r\n    console.log('💾 Tentando salvar no Google Sheets:', betData);\r\n    \r\n    // Testar conexão primeiro\r\n    const connectionOk = await sheetsService.testConnection();\r\n    if (!connectionOk) {\r\n      console.error('❌ Falha na conexão com Google Sheets');\r\n      await sendTelegramMessage(chatId, '❌ **Erro de conexão**\\n\\nNão foi possível conectar ao Google Sheets.');\r\n      return;\r\n    }\r\n    \r\n    // Salvar no Google Sheets\r\n    const success = await sheetsService.addBetData(betData);\r\n    \r\n    if (success) {\r\n      await sendTelegramMessage(\r\n        chatId,\r\n        `✅ **Aposta registrada com sucesso!**\\n\\n` +\r\n        `⚽ **Jogo:** ${betData.jogo}\\n` +\r\n        `📊 **Mercado:** ${betData.mercado}\\n` +\r\n        `📈 **Linha:** ${betData.linha_da_aposta}\\n` +\r\n        `💰 **Odd Tipster:** ${betData.odd_tipster}\\n` +\r\n        `💎 **Odd Real:** ${betData.odd_real}\\n` +\r\n        `📊 **Status:** ${betData.resultado_aposta}`\r\n      );\r\n      \r\n      console.log('✅ Aposta salva com sucesso no Google Sheets');\r\n    } else {\r\n      await sendTelegramMessage(\r\n        chatId,\r\n        `❌ **Erro ao salvar**\\n\\nA aposta foi processada mas houve erro ao salvar no Google Sheets. Verifique os logs.`\r\n      );\r\n      \r\n      console.error('❌ Falha ao salvar no Google Sheets');\r\n    }\r\n    \r\n    pendingConfirmations.delete(oddKey);\r\n  } else {\r\n    await sendTelegramMessage(\r\n      chatId,\r\n      `❌ **Odd inválida**\\n\\nPor favor, digite um número válido (ex: 1.85)`\r\n    );\r\n    console.log('❌ Odd inválida, aguardando nova resposta');\r\n  }\r\n}\r\n\r\nasync function sendTelegramMessage(chatId: number, text: string) {\r\n  const botToken = process.env.TELEGRAM_BOT_TOKEN!;\r\n  \r\n  try {\r\n    console.log(`Enviando mensagem para chat ${chatId}:`, text);\r\n    \r\n    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        chat_id: chatId,\r\n        text: text,\r\n        parse_mode: 'Markdown'\r\n      })\r\n    });\r\n    \r\n    const result = await response.json();\r\n    \r\n    if (!response.ok) {\r\n      console.error('Erro na API do Telegram:', result);\r\n    } else {\r\n      console.log('Mensagem enviada com sucesso');\r\n    }\r\n    \r\n    return result;\r\n  } catch (error) {\r\n    console.error('Erro ao enviar mensagem:', error);\r\n  }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAGA,MAAM,eAAe;IACnB,eAAe,QAAQ,GAAG,CAAC,gBAAgB;IAC3C,OAAO;IACP,aAAa;QACX,cAAc,QAAQ,GAAG,CAAC,mBAAmB;QAC7C,aAAa,CAAC,QAAQ,GAAG,CAAC,kBAAkB,IAAI,EAAE,EAAE,OAAO,CAAC,QAAQ;IACtE;AACF;AAEA,MAAM,gBAAgB,IAAI,iIAAA,CAAA,UAAmB,CAAC;AAE9C,wDAAwD;AACxD,MAAM,uBAAuB,IAAI;AAG1B,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,QAAQ;QACR,WAAW,IAAI,OAAO,WAAW;QACjC,SAAS;IACX;AACF;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,SAAS,MAAM,QAAQ,IAAI;QACjC,QAAQ,GAAG,CAAC,oBAAoB,KAAK,SAAS,CAAC,QAAQ,MAAM;QAE7D,IAAI,OAAO,OAAO,IAAI,OAAO,OAAO,CAAC,IAAI,EAAE;YACzC,MAAM,SAAS,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE;YACrC,MAAM,SAAS,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE;YACrC,MAAM,WAAW,OAAO,OAAO,CAAC,IAAI,CAAC,QAAQ;YAC7C,MAAM,cAAc,OAAO,OAAO,CAAC,IAAI;YACvC,MAAM,eAAe,YAAY,WAAW,GAAG,IAAI;YAEnD,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,SAAS,EAAE,EAAE,OAAO,IAAI,EAAE,YAAY,CAAC,CAAC;YAEnE,MAAM,aAAa,GAAG,OAAO,CAAC,EAAE,QAAQ;YACxC,MAAM,SAAS,GAAG,WAAW,IAAI,CAAC;YAElC,2CAA2C;YAC3C,IAAI,qBAAqB,GAAG,CAAC,SAAS;gBACpC,QAAQ,GAAG,CAAC;gBACZ,MAAM,kBAAkB,QAAQ;gBAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,IAAI;gBAAK;YACtC;YAEA,gEAAgE;YAChE,IAAI,qBAAqB,GAAG,CAAC,eACzB,CAAC,iBAAiB,SAAS,iBAAiB,SAAS,iBAAiB,KAAK,GAAG;gBAChF,QAAQ,GAAG,CAAC;gBACZ,MAAM,sBAAsB,QAAQ;gBACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;oBAAE,IAAI;gBAAK;YACtC;YAEA,8DAA8D;YAC9D,QAAQ,GAAG,CAAC;YACZ,MAAM,UAAU,MAAM,sIAAA,CAAA,eAAY,CAAC,eAAe,CAChD,aACA,QACA,QACA;YAGF,IAAI,SAAS;gBACX,QAAQ,GAAG,CAAC,oCAAoC;gBAEhD,iDAAiD;gBACjD,qBAAqB,GAAG,CAAC,YAAY;gBAErC,iCAAiC;gBACjC,MAAM,oBACJ,QACA,sIAAA,CAAA,eAAY,CAAC,yBAAyB,CAAC;gBAGzC,QAAQ,GAAG,CAAC;YACd,OAAO;gBACL,QAAQ,GAAG,CAAC;YACd;QACF;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;QAAK;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,IAAI;QAAM,GAAG;YAAE,QAAQ;QAAI;IACxD;AACF;AAEA,eAAe,sBAAsB,MAAW,EAAE,UAAkB;IAClE,MAAM,SAAS,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE;IACrC,MAAM,SAAS,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE;IACrC,MAAM,eAAe,OAAO,OAAO,CAAC,IAAI,CAAC,WAAW,GAAG,IAAI;IAE3D,MAAM,UAAU,qBAAqB,GAAG,CAAC;IACzC,IAAI,CAAC,SAAS;QACZ,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,cAAc;IAEnD,IAAI,iBAAiB,OAAO;QAC1B,QAAQ,KAAK,GAAG;QAEhB,+BAA+B;QAC/B,MAAM,SAAS,GAAG,WAAW,IAAI,CAAC;QAClC,qBAAqB,GAAG,CAAC,QAAQ;QACjC,qBAAqB,MAAM,CAAC;QAE5B,uBAAuB;QACvB,MAAM,oBACJ,QACA,CAAC,wGAAwG,CAAC;QAG5G,QAAQ,GAAG,CAAC;IACd,OAAO;QACL,QAAQ,KAAK,GAAG;QAChB,QAAQ,QAAQ,GAAG;QAEnB,0BAA0B;QAC1B,MAAM,UAAU,MAAM,cAAc,UAAU,CAAC;QAE/C,MAAM,oBACJ,QACA,CAAC,sDAAsD,CAAC;QAG1D,qBAAqB,MAAM,CAAC;QAC5B,QAAQ,GAAG,CAAC,CAAC,qCAAqC,EAAE,SAAS;IAC/D;AACF;AAEA,eAAe,kBAAkB,MAAW,EAAE,MAAc;IAC1D,MAAM,SAAS,OAAO,OAAO,CAAC,IAAI,CAAC,EAAE;IACrC,MAAM,cAAc,OAAO,OAAO,CAAC,IAAI;IAEvC,MAAM,UAAU,qBAAqB,GAAG,CAAC;IACzC,IAAI,CAAC,SAAS;QACZ,QAAQ,GAAG,CAAC;QACZ;IACF;IAEA,MAAM,UAAU,WAAW,YAAY,OAAO,CAAC,KAAK;IACpD,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,YAAY,IAAI,EAAE,SAAS;IAEhE,IAAI,CAAC,MAAM,YAAY,UAAU,GAAG;QAClC,QAAQ,QAAQ,GAAG;QAEnB,QAAQ,GAAG,CAAC,wCAAwC;QAEpD,0BAA0B;QAC1B,MAAM,eAAe,MAAM,cAAc,cAAc;QACvD,IAAI,CAAC,cAAc;YACjB,QAAQ,KAAK,CAAC;YACd,MAAM,oBAAoB,QAAQ;YAClC;QACF;QAEA,0BAA0B;QAC1B,MAAM,UAAU,MAAM,cAAc,UAAU,CAAC;QAE/C,IAAI,SAAS;YACX,MAAM,oBACJ,QACA,CAAC,wCAAwC,CAAC,GAC1C,CAAC,YAAY,EAAE,QAAQ,IAAI,CAAC,EAAE,CAAC,GAC/B,CAAC,gBAAgB,EAAE,QAAQ,OAAO,CAAC,EAAE,CAAC,GACtC,CAAC,cAAc,EAAE,QAAQ,eAAe,CAAC,EAAE,CAAC,GAC5C,CAAC,oBAAoB,EAAE,QAAQ,WAAW,CAAC,EAAE,CAAC,GAC9C,CAAC,iBAAiB,EAAE,QAAQ,QAAQ,CAAC,EAAE,CAAC,GACxC,CAAC,eAAe,EAAE,QAAQ,gBAAgB,EAAE;YAG9C,QAAQ,GAAG,CAAC;QACd,OAAO;YACL,MAAM,oBACJ,QACA,CAAC,6GAA6G,CAAC;YAGjH,QAAQ,KAAK,CAAC;QAChB;QAEA,qBAAqB,MAAM,CAAC;IAC9B,OAAO;QACL,MAAM,oBACJ,QACA,CAAC,mEAAmE,CAAC;QAEvE,QAAQ,GAAG,CAAC;IACd;AACF;AAEA,eAAe,oBAAoB,MAAc,EAAE,IAAY;IAC7D,MAAM,WAAW,QAAQ,GAAG,CAAC,kBAAkB;IAE/C,IAAI;QACF,QAAQ,GAAG,CAAC,CAAC,4BAA4B,EAAE,OAAO,CAAC,CAAC,EAAE;QAEtD,MAAM,WAAW,MAAM,MAAM,CAAC,4BAA4B,EAAE,SAAS,YAAY,CAAC,EAAE;YAClF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;gBACnB,SAAS;gBACT,MAAM;gBACN,YAAY;YACd;QACF;QAEA,MAAM,SAAS,MAAM,SAAS,IAAI;QAElC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,QAAQ,KAAK,CAAC,4BAA4B;QAC5C,OAAO;YACL,QAAQ,GAAG,CAAC;QACd;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4BAA4B;IAC5C;AACF","debugId":null}}]
}