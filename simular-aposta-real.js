/**
 * Script para simular uma aposta real sendo detectada e processada
 * Este script replica exatamente o fluxo de uma aposta real
 */

const https = require('https');
const path = require('path');
require('dotenv').config({ path: path.join(process.cwd(), '.env.local') });

const PRODUCTION_URL = 'https://autosheets.loudigital.shop';
const USER_ID = process.env.YOUR_USER_ID;
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;

console.log('üéØ SIMULA√á√ÉO DE APOSTA REAL EM PRODU√á√ÉO');
console.log('='.repeat(60));
console.log('');
console.log('üìã Configura√ß√µes:');
console.log('   URL Produ√ß√£o:', PRODUCTION_URL);
console.log('   User ID:', USER_ID);
console.log('   Bot Token:', BOT_TOKEN ? 'Configurado' : 'N√ÉO CONFIGURADO');
console.log('');

// Fun√ß√£o para fazer requisi√ß√µes HTTPS
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    });
    
    req.on('error', reject);
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

// 1. Simular detec√ß√£o de aposta (como se fosse o monitor GramJS)
async function simularDeteccaoAposta() {
  console.log('1Ô∏è‚É£ SIMULANDO DETEC√á√ÉO DE APOSTA (Monitor GramJS)');
  console.log('-'.repeat(50));
  
  const messageId = Math.floor(Date.now() / 1000); // ID √∫nico baseado em timestamp
  const betKey = `${USER_ID}_${messageId}`;
  
  console.log('üì® Aposta detectada:');
  console.log('   Message ID:', messageId);
  console.log('   Bet Key:', betKey);
  console.log('   Timestamp:', new Date().toISOString());
  
  // Simular o que o monitor faria: salvar no cache
  const apostaData = {
    userId: USER_ID,
    messageId: messageId,
    betKey: betKey,
    timestamp: Date.now(),
    chatId: USER_ID,
    originalMessage: 'Aposta simulada para teste de produ√ß√£o',
    detected: true
  };
  
  console.log('üíæ Dados que seriam salvos no cache:');
  console.log(JSON.stringify(apostaData, null, 2));
  
  return { messageId, betKey, apostaData };
}

// 2. Simular webhook recebendo update de mensagem normal
async function simularWebhookMensagemNormal(messageId) {
  console.log('\n2Ô∏è‚É£ SIMULANDO WEBHOOK - MENSAGEM NORMAL');
  console.log('-'.repeat(50));
  
  try {
    const url = `${PRODUCTION_URL}/api/telegram/webhook`;
    const normalPayload = {
      update_id: Math.floor(Math.random() * 1000000),
      message: {
        message_id: messageId,
        from: {
          id: 7487941746, // ID do bot
          is_bot: true,
          first_name: 'AutoSheets'
        },
        chat: {
          id: parseInt(USER_ID),
          type: 'private'
        },
        date: Math.floor(Date.now() / 1000),
        text: 'Esta √© uma mensagem que deveria ser detectada como aposta'
      }
    };
    
    console.log('üì§ Enviando mensagem normal (que seria detectada como aposta):');
    console.log('   Message ID:', messageId);
    console.log('   From Bot:', normalPayload.message.from.first_name);
    console.log('   Text:', normalPayload.message.text);
    
    const response = await makeRequest(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(normalPayload)
    });
    
    console.log('üìä Status:', response.statusCode);
    console.log('üìã Resposta:', response.body);
    
    return response.statusCode === 200;
  } catch (error) {
    console.log('‚ùå Erro ao simular mensagem normal:', error.message);
    return false;
  }
}

// 3. Aguardar um pouco (simular tempo real)
function aguardar(segundos) {
  console.log(`\n‚è≥ Aguardando ${segundos} segundos (simulando tempo real)...`);
  return new Promise(resolve => setTimeout(resolve, segundos * 1000));
}

// 4. Simular reply do usu√°rio
async function simularReplyUsuario(messageId, betKey) {
  console.log('\n3Ô∏è‚É£ SIMULANDO REPLY DO USU√ÅRIO');
  console.log('-'.repeat(50));
  
  try {
    const url = `${PRODUCTION_URL}/api/telegram/webhook`;
    const replyPayload = {
      update_id: Math.floor(Math.random() * 1000000),
      message: {
        message_id: Math.floor(Math.random() * 1000000),
        from: {
          id: parseInt(USER_ID),
          is_bot: false,
          first_name: 'Usu√°rio Teste'
        },
        chat: {
          id: parseInt(USER_ID),
          type: 'private'
        },
        date: Math.floor(Date.now() / 1000),
        text: '1.75', // Odd do usu√°rio
        reply_to_message: {
          message_id: messageId,
          from: {
            id: 7487941746,
            is_bot: true,
            first_name: 'AutoSheets'
          },
          chat: {
            id: parseInt(USER_ID),
            type: 'private'
          },
          date: Math.floor(Date.now() / 1000) - 60,
          text: 'Esta √© uma mensagem que deveria ser detectada como aposta'
        }
      }
    };
    
    console.log('üì§ Enviando reply do usu√°rio:');
    console.log('   Odd informada: 1.75');
    console.log('   Reply para Message ID:', messageId);
    console.log('   Bet Key esperada:', betKey);
    
    const response = await makeRequest(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(replyPayload)
    });
    
    console.log('üìä Status:', response.statusCode);
    console.log('üìã Resposta:', response.body);
    
    try {
      const responseData = JSON.parse(response.body);
      
      if (responseData.processed === true) {
        console.log('‚úÖ SUCESSO: Reply foi processado!');
        console.log('‚úÖ Aposta foi encontrada no cache e processada');
        return true;
      } else if (responseData.processed === false) {
        console.log('‚ùå FALHA: Reply recebido mas aposta n√£o encontrada');
        console.log('üîç Poss√≠veis causas:');
        console.log('   1. Monitor GramJS n√£o est√° salvando apostas no cache');
        console.log('   2. Cache n√£o est√° sendo compartilhado entre processos');
        console.log('   3. Chave betKey n√£o est√° sendo gerada corretamente');
        console.log('   4. Aposta expirou ou foi removida do cache');
        return false;
      } else {
        console.log('‚ö†Ô∏è Resposta inesperada:', responseData);
        return false;
      }
    } catch (parseError) {
      console.log('‚ö†Ô∏è Resposta n√£o √© JSON v√°lido');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Erro ao simular reply:', error.message);
    return false;
  }
}

// 5. Verificar logs espec√≠ficos
async function verificarLogsEspecificos(betKey) {
  console.log('\n4Ô∏è‚É£ VERIFICA√á√ÉO DE LOGS ESPEC√çFICOS');
  console.log('-'.repeat(50));
  
  console.log('üîç Para verificar se a aposta foi detectada, execute:');
  console.log(`docker-compose -f docker-compose.prod.yml logs autosheets | grep "${betKey}"`);
  console.log('');
  
  console.log('üîç Para verificar logs do monitor GramJS:');
  console.log('docker-compose -f docker-compose.prod.yml logs gramjs-monitor | tail -20');
  console.log('');
  
  console.log('üîç Para verificar se o cache tem a aposta:');
  console.log('docker-compose -f docker-compose.prod.yml exec autosheets cat .bet-cache.json | jq .');
  console.log('');
  
  console.log('üîç Para verificar logs de webhook em tempo real:');
  console.log('docker-compose -f docker-compose.prod.yml logs -f autosheets');
}

// 6. Diagn√≥stico final
function diagnosticoFinal(resultados) {
  console.log('\nüìä DIAGN√ìSTICO FINAL');
  console.log('='.repeat(60));
  
  console.log('Simula√ß√£o de detec√ß√£o:', '‚úÖ');
  console.log('Webhook mensagem normal:', resultados.webhookNormal ? '‚úÖ' : '‚ùå');
  console.log('Processamento de reply:', resultados.replyProcessado ? '‚úÖ' : '‚ùå');
  
  console.log('\nüéØ CONCLUS√ïES:');
  
  if (!resultados.webhookNormal) {
    console.log('‚ùå PROBLEMA CR√çTICO: Webhook n√£o est√° funcionando');
    console.log('   - Verifique se a aplica√ß√£o est√° rodando');
    console.log('   - Verifique se nginx est√° configurado corretamente');
    console.log('   - Verifique se n√£o h√° erros nos logs da aplica√ß√£o');
  } else if (!resultados.replyProcessado) {
    console.log('‚ùå PROBLEMA NO CACHE: Webhook funciona mas replies n√£o s√£o processados');
    console.log('   - O monitor GramJS pode n√£o estar detectando apostas');
    console.log('   - O cache pode n√£o estar sendo compartilhado');
    console.log('   - As chaves betKey podem estar sendo geradas incorretamente');
    console.log('');
    console.log('üîß PR√ìXIMOS PASSOS:');
    console.log('   1. Verificar se o monitor GramJS est√° rodando');
    console.log('   2. Verificar se apostas est√£o sendo salvas no cache');
    console.log('   3. Verificar se as vari√°veis MONITORED_CHAT_IDS est√£o corretas');
    console.log('   4. Verificar se o cache est√° sendo compartilhado entre processos');
  } else {
    console.log('‚úÖ TUDO FUNCIONANDO: O problema pode estar na detec√ß√£o real de apostas');
    console.log('   - Verifique se o monitor est√° conectado aos chats corretos');
    console.log('   - Verifique se as mensagens est√£o sendo detectadas como apostas');
    console.log('   - Verifique os logs do monitor GramJS para ver se detecta mensagens');
  }
  
  console.log('\nüìù COMANDOS ESSENCIAIS PARA EXECUTAR NO SERVIDOR:');
  console.log('docker-compose -f docker-compose.prod.yml ps');
  console.log('docker-compose -f docker-compose.prod.yml logs gramjs-monitor | tail -20');
  console.log('docker-compose -f docker-compose.prod.yml exec autosheets cat .bet-cache.json');
  console.log('docker-compose -f docker-compose.prod.yml logs autosheets | grep -E "(betKey|reply|webhook)" | tail -20');
}

// Executar simula√ß√£o completa
async function executarSimulacao() {
  console.log('üöÄ Iniciando simula√ß√£o completa de aposta real...');
  console.log('');
  
  // 1. Simular detec√ß√£o
  const { messageId, betKey, apostaData } = await simularDeteccaoAposta();
  
  // 2. Simular webhook recebendo mensagem normal
  const webhookNormal = await simularWebhookMensagemNormal(messageId);
  
  // 3. Aguardar um pouco
  await aguardar(2);
  
  // 4. Simular reply
  const replyProcessado = await simularReplyUsuario(messageId, betKey);
  
  // 5. Verificar logs
  await verificarLogsEspecificos(betKey);
  
  // 6. Diagn√≥stico final
  diagnosticoFinal({
    webhookNormal,
    replyProcessado
  });
}

// Executar
executarSimulacao().catch(console.error);