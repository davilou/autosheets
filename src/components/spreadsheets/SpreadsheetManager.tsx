'use client';

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { 
  Plus, 
  FileSpreadsheet, 
  Share2, 
  Settings, 
  Trash2, 
  ExternalLink,
  Calendar,
  Users,
  Activity
} from 'lucide-react';
import { 
  UserSpreadsheet, 
  SpreadsheetTemplate, 
  CreateSpreadsheetRequest,
  SpreadsheetStats,
  SpreadsheetColumn
} from '@/types/spreadsheets';

interface SpreadsheetManagerProps {
  userToken: string;
}

const SpreadsheetManager: React.FC<SpreadsheetManagerProps> = ({ userToken }) => {
  const [spreadsheets, setSpreadsheets] = useState<UserSpreadsheet[]>([]);
  const [templates, setTemplates] = useState<SpreadsheetTemplate[]>([]);
  const [stats, setStats] = useState<SpreadsheetStats | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isCreating, setIsCreating] = useState(false);
  const [showCreateDialog, setShowCreateDialog] = useState(false);

  // Estados para criação de planilha - simplificado para apenas email de compartilhamento
  const [newSpreadsheet, setNewSpreadsheet] = useState<CreateSpreadsheetRequest>({
    name: '', // Será auto-gerado no backend
    description: '',
    templateType: 'clone_by_id',
    customColumns: [],
    driveEmail: '',
    templateSpreadsheetId: '1hTipRbl9CS7ELz_P2h_g_PYi_mqXMpM53i_npLmwRS8'
  });

  const [customColumns, setCustomColumns] = useState<SpreadsheetColumn[]>([]);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadSpreadsheets(),
        // loadTemplates() // Templates não são mais utilizados para criação
      ]);
    } catch (err) {
      setError('Erro ao carregar dados');
    } finally {
      setLoading(false);
    }
  };

  const loadSpreadsheets = async () => {
    try {
      const response = await fetch('/api/spreadsheets', {
        headers: {
          'Authorization': `Bearer ${userToken}`
        }
      });

      if (!response.ok) {
        throw new Error('Erro ao carregar planilhas');
      }

      const data = await response.json();
      if (data.success) {
        setSpreadsheets(data.data.spreadsheets);
        setStats(data.data.stats);
      }
    } catch (err) {
      console.error('Erro ao carregar planilhas:', err);
      throw err;
    }
  };

  const loadTemplates = async () => {
    try {
      const response = await fetch('/api/spreadsheets/templates', {
        headers: {
          'Authorization': `Bearer ${userToken}`
        }
      });

      if (!response.ok) {
        throw new Error('Erro ao carregar templates');
      }

      const data = await response.json();
      if (data.success) {
        setTemplates(data.data.templates);
      }
    } catch (err) {
      console.error('Erro ao carregar templates:', err);
      throw err;
    }
  };

  const isValidEmail = (email: string) => {
    if (!email) return false;
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  };

  const createSpreadsheet = async () => {
    try {
      setIsCreating(true);
      setError(null);

      // Validações simplificadas - apenas validar email de compartilhamento
      if (!newSpreadsheet.driveEmail || !isValidEmail(newSpreadsheet.driveEmail)) {
        setError('Informe um email válido para compartilhamento');
        return;
      }

      // Nome será auto-gerado como "Planilha [email]"
      const autoGeneratedName = `Planilha ${newSpreadsheet.driveEmail}`;

      const requestData = {
        driveEmail: newSpreadsheet.driveEmail.trim(),
        templateType: newSpreadsheet.templateType,
        customColumns: newSpreadsheet.templateType === 'custom' ? customColumns : undefined,
        title: autoGeneratedName, // Nome auto-gerado
        templateSpreadsheetId: newSpreadsheet.templateType === 'clone_by_id' ? newSpreadsheet.templateSpreadsheetId?.trim() : undefined
      };

      const response = await fetch('/api/spreadsheets', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${userToken}`
        },
        body: JSON.stringify(requestData)
      });

      if (!response.ok) {
        const errText = await response.text();
        throw new Error(errText || 'Erro ao criar planilha');
      }

      const data = await response.json();
      if (data.success) {
        setShowCreateDialog(false);
        resetCreateForm();
        await loadSpreadsheets();
      } else {
        setError(data.message || 'Erro ao criar planilha');
      }
    } catch (err) {
      setError('Erro ao criar planilha');
    } finally {
      setIsCreating(false);
    }
  };

  const resetCreateForm = () => {
    setNewSpreadsheet({
      name: '',
      description: '',
      templateType: 'clone_by_id',
      customColumns: [],
      driveEmail: '',
      templateSpreadsheetId: '1hTipRbl9CS7ELz_P2h_g_PYi_mqXMpM53i_npLmwRS8'
    });
    setCustomColumns([]);
  };

  const addCustomColumn = () => {
    setCustomColumns([...customColumns, {
      name: '',
      type: 'text',
      required: false
    }]);
  };

  const updateCustomColumn = (index: number, field: keyof SpreadsheetColumn, value: any) => {
    const updated = [...customColumns];
    updated[index] = { ...updated[index], [field]: value };
    setCustomColumns(updated);
  };

  const removeCustomColumn = (index: number) => {
    setCustomColumns(customColumns.filter((_, i) => i !== index));
  };

  const shareSpreadsheet = async (spreadsheetId: string, emails: string[], role: 'reader' | 'writer') => {
    try {
      const response = await fetch(`/api/spreadsheets/${spreadsheetId}/share`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${userToken}`
        },
        body: JSON.stringify({ emails, role })
      });

      if (!response.ok) {
        throw new Error('Erro ao compartilhar planilha');
      }

      const data = await response.json();
      if (data.success) {
        await loadSpreadsheets();
        return true;
      }
      return false;
    } catch (err) {
      console.error('Erro ao compartilhar planilha:', err);
      return false;
    }
  };

  const createBackup = async (spreadsheetId: string, customName?: string) => {
    try {
      const response = await fetch(`/api/spreadsheets/${spreadsheetId}/backup`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${userToken}`
        },
        body: JSON.stringify({ customName })
      });

      if (!response.ok) {
        throw new Error('Erro ao criar backup');
      }

      const data = await response.json();
      return data.success;
    } catch (err) {
      console.error('Erro ao criar backup:', err);
      return false;
    }
  };

  const formatDate = (date: Date | string) => {
    return new Date(date).toLocaleDateString('pt-BR', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getStatusBadge = (isActive: boolean) => {
    return (
      <Badge variant={isActive ? 'default' : 'secondary'}>
        {isActive ? 'Ativa' : 'Inativa'}
      </Badge>
    );
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p>Carregando planilhas...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header com estatísticas */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <FileSpreadsheet className="h-5 w-5 text-blue-600" />
                <div>
                  <p className="text-sm text-gray-600">Total</p>
                  <p className="text-2xl font-bold">{stats.totalSpreadsheets}</p>
                </div>
              </div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center space-x-2">
                <Activity className="h-5 w-5 text-green-600" />
                <div>
                  <p className="text-sm text-gray-600">Ativas</p>
                  <p className="text-2xl font-bold">{stats.activeSpreadsheets}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Botão para criar nova planilha */}
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold">Minhas Planilhas</h2>
        <Dialog open={showCreateDialog} onOpenChange={(value) => {
          setShowCreateDialog(value);
          if (value) {
            setNewSpreadsheet({
              name: '',
              description: '',
              templateType: 'clone_by_id',
              customColumns: [],
              driveEmail: '',
              templateSpreadsheetId: '1hTipRbl9CS7ELz_P2h_g_PYi_mqXMpM53i_npLmwRS8'
            });
            setCustomColumns([]);
            setError(null);
          }
        }}>
          <DialogTrigger asChild>
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              Nova Planilha
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Criar Nova Planilha</DialogTitle>
              <DialogDescription>
                Configure sua nova planilha personalizada
              </DialogDescription>
            </DialogHeader>
            
            <div className="space-y-4">
              {error && (
                <Alert>
                  <AlertDescription>{error}</AlertDescription>
                </Alert>
              )}
              
              <div className="grid grid-cols-2 gap-4">
                {/* Campo de nome oculto - nome será gerado automaticamente */}
                <div className="hidden">
                  <Label htmlFor="name">Nome da Planilha</Label>
                  <Input
                    id="name"
                    value={newSpreadsheet.name}
                    onChange={(e) => setNewSpreadsheet({...newSpreadsheet, name: e.target.value})}
                    placeholder="Ex: Apostas Futebol 2024"
                  />
                </div>
                
                <div className="space-y-3">
                  <Label>Modelo</Label>
                  <Select value="clone_by_id" disabled>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="clone_by_id">Cópia do modelo padrão</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              {/* Email do Google Drive */}
              <div>
                <Label htmlFor="driveEmail">Email para compartilhamento</Label>
                <Input
                  id="driveEmail"
                  type="email"
                  value={newSpreadsheet.driveEmail || ''}
                  onChange={(e) => setNewSpreadsheet({ ...newSpreadsheet, driveEmail: e.target.value })}
                  placeholder="exemplo@gmail.com"
                />
              </div>
              
              {/* Campo de descrição oculto */}
              <div className="hidden">
                <Label htmlFor="description">Descrição (opcional)</Label>
                <Textarea
                  id="description"
                  value={newSpreadsheet.description}
                  onChange={(e) => setNewSpreadsheet({...newSpreadsheet, description: e.target.value})}
                  placeholder="Descreva o propósito desta planilha..."
                  rows={3}
                />
              </div>
              
              {/* Colunas personalizadas para template custom */}
              {newSpreadsheet.templateType === 'custom' && (
                <div className="space-y-4">
                  <div className="flex justify-between items-center">
                    <Label>Colunas Personalizadas</Label>
                    <Button type="button" variant="outline" size="sm" onClick={addCustomColumn}>
                      <Plus className="h-4 w-4 mr-1" />
                      Adicionar Coluna
                    </Button>
                  </div>
                  
                  {customColumns.map((column, index) => (
                    <div key={index} className="grid grid-cols-4 gap-2 p-3 border rounded">
                      <Input
                        placeholder="Nome da coluna"
                        value={column.name}
                        onChange={(e) => updateCustomColumn(index, 'name', e.target.value)}
                      />
                      <Select
                        value={column.type}
                        onValueChange={(value: any) => updateCustomColumn(index, 'type', value)}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="text">Texto</SelectItem>
                          <SelectItem value="number">Número</SelectItem>
                          <SelectItem value="date">Data</SelectItem>
                          <SelectItem value="boolean">Sim/Não</SelectItem>
                          <SelectItem value="formula">Fórmula</SelectItem>
                        </SelectContent>
                      </Select>
                      <div className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={column.required || false}
                          onChange={(e) => updateCustomColumn(index, 'required', e.target.checked)}
                        />
                        <Label className="text-sm">Obrigatório</Label>
                      </div>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => removeCustomColumn(index)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              {/* Removido: Configuração de backup automático */}

              <div className="flex justify-end space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setShowCreateDialog(false)}
                >
                  Cancelar
                </Button>
                <Button
                  onClick={createSpreadsheet}
                  disabled={
                    isCreating ||
                    !newSpreadsheet.driveEmail?.trim() ||
                    !isValidEmail(newSpreadsheet.driveEmail!)
                  }
                >
                  {isCreating ? 'Criando...' : 'Criar Planilha'}
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>

      {/* Lista de planilhas */}
      {spreadsheets.length === 0 ? (
        <Card>
          <CardContent className="p-8 text-center">
            <FileSpreadsheet className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Nenhuma planilha encontrada</h3>
            <p className="text-gray-600 mb-4">Crie sua primeira planilha personalizada para começar.</p>
            <Button onClick={() => setShowCreateDialog(true)}>
              <Plus className="h-4 w-4 mr-2" />
              Criar Primeira Planilha
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {spreadsheets.map((spreadsheet) => (
            <Card key={spreadsheet.id} className="hover:shadow-lg transition-shadow">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle className="text-lg">{spreadsheet.name}</CardTitle>
                    <CardDescription>{spreadsheet.description}</CardDescription>
                  </div>
                  {getStatusBadge(spreadsheet.isActive)}
                </div>
              </CardHeader>
              
              <CardContent>
                <div className="space-y-3">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Template:</span>
                    <Badge variant="outline">{spreadsheet.templateName}</Badge>
                  </div>
                  
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Criada em:</span>
                    <span>{formatDate(spreadsheet.createdAt)}</span>
                  </div>
                  
                  {spreadsheet.stats && (
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600">Linhas:</span>
                      <span>{spreadsheet.stats.totalRows}</span>
                    </div>
                  )}
                  
                  {spreadsheet.permissions?.shared && spreadsheet.permissions.shared.length > 0 && (
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600">Compartilhada:</span>
                      <div className="flex items-center">
                        <Users className="h-4 w-4 mr-1" />
                        <span>{spreadsheet.permissions.shared.length}</span>
                      </div>
                    </div>
                  )}
                  
                  {spreadsheet.autoBackup?.enabled && (
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-gray-600">Backup:</span>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-1" />
                        <span className="capitalize">{spreadsheet.autoBackup.frequency}</span>
                      </div>
                    </div>
                  )}
                  
                  <div className="flex space-x-2 pt-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => {
                        const link = spreadsheet.url || spreadsheet.googleSheetsUrl || (spreadsheet.googleSheetsId ? `https://docs.google.com/spreadsheets/d/${spreadsheet.googleSheetsId}/edit` : '');
                        if (link) {
                          window.open(link, '_blank');
                        } else {
                          alert('Link da planilha indisponível no momento.');
                        }
                      }}
                    >
                      <ExternalLink className="h-4 w-4 mr-1" />
                      Abrir
                    </Button>
                    
                    {/* Removido: Botão de Backup */}
                    
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={async () => {
                        const input = window.prompt('Informe os emails para compartilhar (separados por vírgula):', spreadsheet.driveEmail || '');
                        if (!input) return;
                        const emails = input.split(',').map(e => e.trim()).filter(e => !!e);
                        if (emails.length === 0) return;
                        const ok = await shareSpreadsheet(spreadsheet.spreadsheetId, emails, 'writer');
                        if (!ok) {
                          console.error('Falha ao compartilhar planilha');
                        }
                      }}
                    >
                      <Share2 className="h-4 w-4 mr-1" />
                      Compartilhar
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};

export default SpreadsheetManager;