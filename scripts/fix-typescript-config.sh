#!/bin/bash

# Script para corrigir configura√ß√£o do TypeScript e resolver imports
echo "üîß CORRIGINDO CONFIGURA√á√ÉO TYPESCRIPT"
echo "===================================="
echo ""

# Verificar se o container est√° rodando
echo "üìã VERIFICANDO STATUS DO CONTAINER:"
echo "----------------------------------"
docker ps --filter "name=autosheets_app" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
echo ""

# Backup do tsconfig.json atual
echo "üíæ FAZENDO BACKUP DO TSCONFIG.JSON:"
echo "----------------------------------"
docker exec autosheets_app cp tsconfig.json tsconfig.json.backup
echo "‚úÖ Backup criado: tsconfig.json.backup"
echo ""

# Criar novo tsconfig.json com baseUrl
echo "üîß CRIANDO NOVO TSCONFIG.JSON:"
echo "-----------------------------"
docker exec autosheets_app cat > tsconfig.json << 'EOF'
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "noImplicitAny": true,
    "noImplicitReturns": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
EOF

echo "‚úÖ Novo tsconfig.json criado com baseUrl"
echo ""

# Verificar se os arquivos importados existem
echo "üìÅ VERIFICANDO ARQUIVOS IMPORTADOS:"
echo "-----------------------------------"
echo "Verificando estrutura de pastas:"
docker exec autosheets_app find src/lib -name "*.ts" | head -10
echo ""

# Testar compila√ß√£o TypeScript
echo "üîß TESTANDO COMPILA√á√ÉO TYPESCRIPT:"
echo "---------------------------------"
echo "Testando compila√ß√£o do webhook:"
docker exec autosheets_app npx tsc --noEmit --skipLibCheck src/app/api/telegram/webhook/route.ts 2>&1 || echo "‚ùå Ainda h√° erros de TypeScript"
echo ""

# Limpar cache do Next.js
echo "üßπ LIMPANDO CACHE DO NEXT.JS:"
echo "-----------------------------"
docker exec autosheets_app rm -rf .next
echo "‚úÖ Cache limpo"
echo ""

# Parar processos atuais
echo "‚èπÔ∏è PARANDO PROCESSOS ATUAIS:"
echo "----------------------------"
docker exec autosheets_app pkill -f "next" 2>/dev/null || echo "Nenhum processo Next.js encontrado"
docker exec autosheets_app pkill -f "npm" 2>/dev/null || echo "Nenhum processo npm encontrado"
echo ""

# Aguardar um pouco
echo "‚è≥ Aguardando processos pararem..."
sleep 3
echo ""

# Iniciar Next.js novamente
echo "üöÄ INICIANDO NEXT.JS:"
echo "--------------------"
echo "Iniciando em modo desenvolvimento..."
docker exec -d autosheets_app npm run dev
echo "Aguardando inicializa√ß√£o..."
sleep 20
echo ""

# Verificar se iniciou corretamente
echo "üìä VERIFICANDO INICIALIZA√á√ÉO:"
echo "-----------------------------"
echo "Processos Node.js:"
docker exec autosheets_app ps aux | grep -E "(next|node)" | head -5
echo ""
echo "Porta 3000:"
docker exec autosheets_app netstat -tlnp | grep :3000 || echo "‚ùå Porta 3000 n√£o est√° ativa"
echo ""

# Verificar logs de inicializa√ß√£o
echo "üìã LOGS DE INICIALIZA√á√ÉO:"
echo "------------------------"
docker logs autosheets_app --since 25s 2>&1 | tail -15
echo ""

# Testar o webhook ap√≥s as corre√ß√µes
echo "üß™ TESTANDO WEBHOOK AP√ìS CORRE√á√ïES:"
echo "===================================="
echo "Limpando logs para teste..."
docker logs autosheets_app --tail 0 > /dev/null 2>&1
echo ""

echo "Enviando payload de teste..."
RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" \
  -X POST \
  -H "Content-Type: application/json" \
  -d '{"update_id":123,"message":{"message_id":456,"text":"teste","from":{"id":789},"chat":{"id":-123}}}' \
  http://localhost:3000/api/telegram/webhook)

echo "Resposta: $RESPONSE"
echo ""

# Verificar logs ap√≥s o teste
echo "üìã LOGS AP√ìS O TESTE:"
echo "--------------------"
sleep 3
WEBHOOK_LOGS=$(docker logs autosheets_app --since 10s 2>&1)
echo "$WEBHOOK_LOGS"
echo ""

# An√°lise final
echo "üìã AN√ÅLISE FINAL:"
echo "================="

if echo "$WEBHOOK_LOGS" | grep -q "üîÑ Webhook recebido"; then
    echo "‚úÖ SUCESSO: Webhook est√° funcionando ap√≥s corre√ß√µes!"
    echo "‚úÖ Problema de TypeScript resolvido"
else
    echo "‚ùå PROBLEMA PERSISTE: Verificando poss√≠veis causas..."
    echo ""
    
    # Verificar se h√° erros de compila√ß√£o
    if echo "$WEBHOOK_LOGS" | grep -q -i "error\|Error\|ERROR"; then
        echo "‚ùå H√° erros de compila√ß√£o nos logs"
        echo "Erros encontrados:"
        echo "$WEBHOOK_LOGS" | grep -i "error\|Error\|ERROR" | head -5
    else
        echo "‚ÑπÔ∏è N√£o h√° erros vis√≠veis nos logs"
    fi
    
    echo ""
    echo "üîß PR√ìXIMOS PASSOS:"
    echo "=================="
    echo "1. Verificar se o Next.js compilou corretamente"
    echo "2. Verificar se h√° outros erros de depend√™ncias"
    echo "3. Testar build de produ√ß√£o: docker exec autosheets_app npm run build"
fi

echo ""
echo "üîß COMANDOS √öTEIS:"
echo "=================="
echo "1. Ver logs em tempo real: docker logs -f autosheets_app"
echo "2. Entrar no container: docker exec -it autosheets_app /bin/sh"
echo "3. Testar build: docker exec autosheets_app npm run build"
echo "4. Restaurar backup: docker exec autosheets_app cp tsconfig.json.backup tsconfig.json"
echo ""