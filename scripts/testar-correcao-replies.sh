#!/bin/bash

# Script para testar as corre√ß√µes implementadas no sistema de replies
# Verifica se o monitor est√° se conectando automaticamente ao webhook

echo "üß™ TESTE DAS CORRE√á√ïES - SISTEMA DE REPLIES"
echo "==========================================="
echo ""

# Fun√ß√£o para verificar logs de conex√£o do monitor
verificar_conexao_monitor() {
    echo "üîó VERIFICANDO CONEX√ÉO DO MONITOR:"
    echo "----------------------------------"
    
    echo "üîç Procurando logs de conex√£o autom√°tica:"
    docker compose -f docker-compose.prod.yml logs autosheets --tail=50 | grep -E "(Monitor n√£o conectado|Tentando conectar|Monitor GramJS conectado ao webhook|Status do monitor)"
    
    echo ""
    echo "üîç Verificando status atual do monitor:"
    docker compose -f docker-compose.prod.yml logs autosheets --tail=20 | grep -E "(CONECTADO|DESCONECTADO)"
    
    echo ""
}

# Fun√ß√£o para testar webhook com logs detalhados
testar_webhook_detalhado() {
    echo "üì° TESTANDO WEBHOOK COM LOGS DETALHADOS:"
    echo "----------------------------------------"
    
    # Verificar se h√° apostas no cache
    echo "üì¶ Verificando cache antes do teste:"
    if docker compose -f docker-compose.prod.yml exec autosheets test -f ".bet-cache.json"; then
        echo "‚úÖ Cache existe"
        CACHE_CONTENT=$(docker compose -f docker-compose.prod.yml exec autosheets cat .bet-cache.json)
        echo "üìã Conte√∫do: $CACHE_CONTENT"
        
        # Extrair primeira chave
        FIRST_KEY=$(echo $CACHE_CONTENT | jq -r 'keys[0]' 2>/dev/null)
        
        if [ "$FIRST_KEY" != "null" ] && [ "$FIRST_KEY" != "" ]; then
            echo "üîë Chave para teste: $FIRST_KEY"
            
            # Extrair componentes da chave
            USER_ID=$(echo $FIRST_KEY | cut -d'_' -f1)
            MESSAGE_ID=$(echo $FIRST_KEY | cut -d'_' -f2)
            
            echo "üë§ User ID: $USER_ID"
            echo "üì® Message ID: $MESSAGE_ID"
            echo ""
            
            # Monitorar logs em tempo real
            echo "üìä Iniciando monitoramento de logs..."
            docker compose -f docker-compose.prod.yml logs -f autosheets &
            LOGS_PID=$!
            
            sleep 2
            
            echo "üì° Enviando reply de teste..."
            
            # Enviar reply simulado
            RESPONSE=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST "https://autosheets.loudigital.com.br/api/telegram/webhook" \
                 -H "Content-Type: application/json" \
                 -d "{
                     \"update_id\": 999999999,
                     \"message\": {
                         \"message_id\": 777,
                         \"from\": {
                             \"id\": $USER_ID,
                             \"is_bot\": false,
                             \"first_name\": \"Test User\"
                         },
                         \"chat\": {
                             \"id\": $USER_ID,
                             \"type\": \"private\"
                         },
                         \"date\": $(date +%s),
                         \"text\": \"1.85\",
                         \"reply_to_message\": {
                             \"message_id\": $MESSAGE_ID,
                             \"from\": {
                                 \"id\": 7487941746,
                                 \"is_bot\": true,
                                 \"first_name\": \"ApostasMonitorBot\"
                             },
                             \"date\": $(($(date +%s) - 60)),
                             \"text\": \"Mensagem de notifica√ß√£o\"
                         }
                     }
                 }")
            
            # Extrair status HTTP
            HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d: -f2)
            RESPONSE_BODY=$(echo "$RESPONSE" | grep -v "HTTP_STATUS")
            
            echo "üìä Resposta do webhook:"
            echo "   Status: $HTTP_STATUS"
            echo "   Body: $RESPONSE_BODY"
            echo ""
            
            # Aguardar processamento
            echo "‚è≥ Aguardando 5 segundos para processamento..."
            sleep 5
            
            # Parar monitoramento de logs
            kill $LOGS_PID 2>/dev/null
            
            echo "üìä Verificando resultado do teste:"
            echo "----------------------------------"
            
            # Verificar logs espec√≠ficos do teste
            echo "üîç Logs de conex√£o do monitor:"
            docker compose -f docker-compose.prod.yml logs autosheets --tail=30 | grep -E "(Monitor n√£o conectado|Tentando conectar|Monitor GramJS conectado|Status do monitor)"
            
            echo ""
            echo "üîç Logs de processamento do cache:"
            docker compose -f docker-compose.prod.yml logs autosheets --tail=30 | grep -E "(\[CACHE\]|Procurando chave|Chave encontrada|Dados da aposta)"
            
            echo ""
            echo "üîç Logs de processamento da aposta:"
            docker compose -f docker-compose.prod.yml logs autosheets --tail=30 | grep -E "(Processando resposta|üí∞|‚úÖ|‚ùå)"
            
            echo ""
            echo "üì¶ Estado do cache ap√≥s o teste:"
            if docker compose -f docker-compose.prod.yml exec autosheets test -f ".bet-cache.json"; then
                NEW_CACHE=$(docker compose -f docker-compose.prod.yml exec autosheets cat .bet-cache.json)
                echo "üìã Novo conte√∫do: $NEW_CACHE"
                
                # Verificar se a chave foi removida (indicando processamento bem-sucedido)
                if echo "$NEW_CACHE" | jq -e ".\"$FIRST_KEY\"" > /dev/null 2>&1; then
                    echo "‚ö†Ô∏è Chave ainda existe - reply pode n√£o ter sido processado"
                else
                    echo "‚úÖ Chave removida - reply foi processado com sucesso!"
                fi
            else
                echo "‚ùå Cache n√£o existe mais"
            fi
            
        else
            echo "‚ùå Nenhuma chave v√°lida no cache para teste"
        fi
    else
        echo "‚ùå Cache n√£o existe - n√£o h√° apostas para testar"
        echo "üí° Execute primeiro uma detec√ß√£o de aposta para criar o cache"
    fi
    
    echo ""
}

# Fun√ß√£o para verificar melhorias no cache
verificar_melhorias_cache() {
    echo "üìã VERIFICANDO MELHORIAS NO CACHE:"
    echo "----------------------------------"
    
    echo "üîç Procurando logs detalhados do cache:"
    docker compose -f docker-compose.prod.yml logs autosheets --tail=50 | grep -E "(\[CACHE\]|Total de apostas|Chaves dispon√≠veis|Chave.*encontrada)"
    
    echo ""
}

# Fun√ß√£o para an√°lise de resultados
analisar_resultados() {
    echo "üìä AN√ÅLISE DOS RESULTADOS:"
    echo "==========================="
    
    echo "‚úÖ VERIFICA√á√ïES REALIZADAS:"
    echo "1. Conex√£o autom√°tica do monitor ao webhook"
    echo "2. Logs detalhados do cache"
    echo "3. Processamento de reply simulado"
    echo "4. Remo√ß√£o da aposta do cache ap√≥s processamento"
    echo ""
    
    echo "üéØ INDICADORES DE SUCESSO:"
    echo "- Monitor conectado automaticamente"
    echo "- Logs '[CACHE]' aparecem com detalhes"
    echo "- Reply √© processado (logs 'üí∞ Processando resposta')"
    echo "- Chave √© removida do cache ap√≥s processamento"
    echo ""
    
    echo "üö® INDICADORES DE PROBLEMA:"
    echo "- Monitor permanece 'DESCONECTADO'"
    echo "- Erro ao conectar monitor"
    echo "- Chave n√£o encontrada no cache"
    echo "- Chave permanece no cache ap√≥s teste"
    echo ""
}

# Fun√ß√£o principal
main() {
    echo "üöÄ Iniciando teste das corre√ß√µes..."
    echo ""
    
    verificar_conexao_monitor
    verificar_melhorias_cache
    
    echo "üß™ TESTE PR√ÅTICO:"
    echo "================="
    read -p "Deseja executar teste de reply simulado? (s/n): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Ss]$ ]]; then
        testar_webhook_detalhado
    fi
    
    analisar_resultados
    
    echo "üìã PR√ìXIMOS PASSOS:"
    echo "=================="
    echo "1. Se o monitor n√£o conectar automaticamente:"
    echo "   - Verificar vari√°veis de ambiente"
    echo "   - Reiniciar aplica√ß√£o"
    echo ""
    echo "2. Se o cache n√£o mostrar logs detalhados:"
    echo "   - Verificar se as altera√ß√µes foram aplicadas"
    echo "   - Reiniciar aplica√ß√£o"
    echo ""
    echo "3. Se o reply n√£o for processado:"
    echo "   - Verificar se a chave est√° correta"
    echo "   - Verificar conectividade do webhook"
    echo ""
    echo "4. Para teste real:"
    echo "   - Enviar aposta em grupo monitorado"
    echo "   - Responder √† notifica√ß√£o privada"
    echo "   - Verificar se foi salva na planilha"
    echo ""
}

# Executar teste
main