#!/bin/bash

# Script para testar especificamente a resolu√ß√£o de path aliases do TypeScript
# ap√≥s as corre√ß√µes no tsconfig.json e next.config.ts

echo "üîß TESTE DE RESOLU√á√ÉO DE PATH ALIASES DO TYPESCRIPT"
echo "=================================================="
echo ""

# 1. Parar containers existentes
echo "üõë PARANDO CONTAINERS EXISTENTES:"
echo "--------------------------------"
docker compose -f docker-compose.prod.yml down
echo "‚úÖ Containers parados"
echo ""

# 2. Rebuild apenas a aplica√ß√£o
echo "üî® REBUILD DA APLICA√á√ÉO:"
echo "------------------------"
docker compose -f docker-compose.prod.yml build --no-cache autosheets
echo "‚úÖ Build conclu√≠do"
echo ""

# 3. Iniciar apenas os servi√ßos necess√°rios
echo "üöÄ INICIANDO SERVI√áOS:"
echo "----------------------"
docker compose -f docker-compose.prod.yml up -d postgres redis
echo "Aguardando banco e redis..."
sleep 10
docker compose -f docker-compose.prod.yml up -d autosheets
echo "Aguardando aplica√ß√£o..."
sleep 20
echo ""

# 4. Verificar se o container est√° rodando
echo "üìä STATUS DO CONTAINER:"
echo "----------------------"
docker ps --filter name=autosheets_app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
echo ""

# 5. Testar compila√ß√£o TypeScript com diferentes abordagens
echo "üîß TESTANDO COMPILA√á√ÉO TYPESCRIPT:"
echo "---------------------------------"

# Teste 1: Compila√ß√£o direta do arquivo webhook
echo "üìù Teste 1: Compila√ß√£o direta do webhook"
docker exec autosheets_app npx tsc --noEmit --skipLibCheck src/app/api/telegram/webhook/route.ts
TEST1_RESULT=$?
echo "Resultado: $([ $TEST1_RESULT -eq 0 ] && echo "‚úÖ SUCESSO" || echo "‚ùå ERRO")"
echo ""

# Teste 2: Verificar se os m√≥dulos existem
echo "üìÅ Teste 2: Verifica√ß√£o de exist√™ncia dos m√≥dulos"
echo "Verificando @/lib/sheets/service:"
docker exec autosheets_app test -f "src/lib/sheets/service.ts" && echo "‚úÖ Existe" || echo "‚ùå N√£o existe"
echo "Verificando @/lib/gemini/parser:"
docker exec autosheets_app test -f "src/lib/gemini/parser.ts" && echo "‚úÖ Existe" || echo "‚ùå N√£o existe"
echo "Verificando @/lib/telegram/parser:"
docker exec autosheets_app test -f "src/lib/telegram/parser.ts" && echo "‚úÖ Existe" || echo "‚ùå N√£o existe"
echo "Verificando @/lib/telegram/gramjs-monitor:"
docker exec autosheets_app test -f "src/lib/telegram/gramjs-monitor.ts" && echo "‚úÖ Existe" || echo "‚ùå N√£o existe"
echo "Verificando @/lib/shared/bet-cache:"
docker exec autosheets_app test -f "src/lib/shared/bet-cache.ts" && echo "‚úÖ Existe" || echo "‚ùå N√£o existe"
echo ""

# Teste 3: Verificar tsconfig.json no container
echo "‚öôÔ∏è Teste 3: Verifica√ß√£o do tsconfig.json"
echo "Conte√∫do do tsconfig.json no container:"
docker exec autosheets_app cat tsconfig.json | jq '.compilerOptions.paths'
echo ""

# Teste 4: Testar resolu√ß√£o de m√≥dulos com Node.js
echo "üîç Teste 4: Teste de resolu√ß√£o com Node.js"
echo "Testando import de @/lib/sheets/service:"
docker exec autosheets_app node -e "try { require('./src/lib/sheets/service.ts'); console.log('‚úÖ M√≥dulo encontrado'); } catch(e) { console.log('‚ùå Erro:', e.message); }"
echo ""

# Teste 5: Compila√ß√£o completa do projeto
echo "üèóÔ∏è Teste 5: Compila√ß√£o completa do Next.js"
echo "Executando npm run build:"
docker exec autosheets_app npm run build
TEST5_RESULT=$?
echo "Resultado: $([ $TEST5_RESULT -eq 0 ] && echo "‚úÖ BUILD SUCESSO" || echo "‚ùå BUILD ERRO")"
echo ""

# Teste 6: Verificar se o servidor Next.js est√° funcionando
echo "üåê Teste 6: Verifica√ß√£o do servidor Next.js"
echo "Processos Node.js:"
docker exec autosheets_app ps aux | grep node | grep -v grep
echo ""
echo "Porta 3000:"
docker exec autosheets_app netstat -tlnp | grep :3000
echo ""

# Teste 7: Teste do webhook
echo "üß™ Teste 7: Teste do webhook"
echo "Testando endpoint /api/telegram/webhook:"
RESPONSE=$(curl -s -X POST http://localhost:3000/api/telegram/webhook \
  -H "Content-Type: application/json" \
  -d '{"message":{"text":"test"}}' \
  -w "\nHTTP_CODE:%{http_code}" 2>/dev/null || echo "Erro de conex√£o")
echo "Resposta: $RESPONSE"
echo ""

# Teste 8: Verificar logs de erro
echo "üìã Teste 8: Logs de erro do container"
echo "√öltimos logs do container:"
docker logs autosheets_app --tail 20
echo ""

# Relat√≥rio final
echo "üìä RELAT√ìRIO FINAL:"
echo "=================="
echo "Compila√ß√£o TypeScript (webhook): $([ $TEST1_RESULT -eq 0 ] && echo "‚úÖ OK" || echo "‚ùå ERRO")"
echo "Build Next.js completo: $([ $TEST5_RESULT -eq 0 ] && echo "‚úÖ OK" || echo "‚ùå ERRO")"
echo "Webhook resposta HTTP: $(echo "$RESPONSE" | grep -q "HTTP_CODE:200" && echo "‚úÖ 200 OK" || echo "‚ùå ERRO")"
echo ""

if [ $TEST1_RESULT -eq 0 ] && [ $TEST5_RESULT -eq 0 ]; then
    echo "üéâ SUCESSO! Os path aliases est√£o funcionando corretamente!"
    echo "‚úÖ TypeScript compilando sem erros"
    echo "‚úÖ Next.js build bem-sucedido"
else
    echo "‚ùå AINDA H√Å PROBLEMAS:"
    [ $TEST1_RESULT -ne 0 ] && echo "   - Erros de TypeScript na resolu√ß√£o de path aliases"
    [ $TEST5_RESULT -ne 0 ] && echo "   - Falha no build do Next.js"
fi
echo ""

echo "üîß PR√ìXIMOS PASSOS (se necess√°rio):"
echo "===================================="
echo "1. Ver logs completos: docker logs -f autosheets_app"
echo "2. Entrar no container: docker exec -it autosheets_app /bin/sh"
echo "3. Verificar tsconfig: docker exec autosheets_app cat tsconfig.json"
echo "4. Testar imports manualmente: docker exec autosheets_app node -e \"console.log(require.resolve('./src/lib/sheets/service'))\""
echo ""